#!/bin/bash
# ---------------------------------------------------
# Thumbnailer for LibreOffice & OpenOffice documents
#
# Procedure :
#   http://bernaerts.dyndns.org/linux/76-gnome/285-gnome-shell-generate-libreoffice-thumbnail-nautilus
# Depends on :
#   * mimetype
#   * unzip
#   * pbmmake, pngtopnm, pnmtopng, pnmscalefixed and pnmcomp (netpbm package)
#   * gvfs-copy (gvfs-bin package)
# Parameters :
#   $1 - URI of office file
#   $2 - full path of generated thumbnail
#   $3 - height of thumbnail in pixels
# Revision history :
# 04/08/2013, V1.0 - Creation by N. Bernaerts
# 15/11/2014, V2.0 - Use URI to handle network shares
# 07/10/2017, V2.1 - Speedup with netpbm tools
# ---------------------------------------------------

# check tools availability
command -v gvfs-copy >/dev/null 2>&1 || { echo "[error] gvfs-copy missing"; exit 1; }
command -v mimetype >/dev/null 2>&1 || { echo "[error] mimetype missing"; exit 1; }
command -v unzip >/dev/null 2>&1 || { echo "[error] unzip missing"; exit 1; }
command -v pbmmake >/dev/null 2>&1 || { echo "[error] pbmmake missing"; exit 1; }
command -v pngtopnm >/dev/null 2>&1 || { echo "[error] pngtopnm missing"; exit 1; }
command -v pnmscalefixed >/dev/null 2>&1 || { echo "[error] pnmscalefixed missing"; exit 1; }
command -v pnmcomp >/dev/null 2>&1 || { echo "[error] pnmcomp missing"; exit 1; }
command -v pnmtopng >/dev/null 2>&1 || { echo "[error] pnmtopng missing"; exit 1; }

# get parameters
SCRIPT_NAME=$(basename $0)
FILE_URI="$1"
FILE_THUMB="$2"
SIZE="$3"

# get filename extension
FILE_EXT=$(echo "${FILE_URI}" | sed 's/^.*\.\([a-zA-Z0-9]*\)$/\1/')
[ "${FILE_EXT}" = "${FILE_URI}" ] && FILE_EXT="none"

# generate temporary local filename
TMP_LOCAL=$(mktemp -t "thumb-lo-XXXXXXXX.${FILE_EXT}")
TMP_PNM=$(mktemp -t "thumb-lo-XXXXXXXX.pnm")

# set working path
PATH_SYSTEM="/usr/local/sbin/${SCRIPT_NAME}.res"
PATH_CACHE="$HOME/.cache/${SCRIPT_NAME}"

# if needed, create cache directory
[ ! -d "${PATH_CACHE}" ] && mkdir --parent "${PATH_CACHE}"

# if file is a remote one
URI_TYPE="${FILE_URI:0:4}"
if [ "${URI_TYPE}" = "file" ]
then
	# convert URI to local path
	FILE_PATH=$(printf '%b' "${FILE_URI//%/\\x}")

	# extract local path
	FILE_LOCAL="${FILE_PATH:7}"
else
	# check gvfs-copy availability
	command -v gvfs-copy >/dev/null 2>&1 || exit 1

	# copy input file to temporary local file
	gvfs-copy "${FILE_URI}" "${TMP_LOCAL}"
	FILE_LOCAL="${TMP_LOCAL}"	
fi

# get document type (text, spreadsheet, graphics or presentation)
DOC_TYPE=$(mimetype -b "${FILE_LOCAL}" | sed 's/.*: //' | sed 's/^.*opendocument.\([^-]*\).*/\1/')

# if needed, create tag and mask
DOC_TAG="${PATH_CACHE}/${SIZE}-${DOC_TYPE}.pnm"
DOC_ALPHA="${PATH_CACHE}/${SIZE}-${DOC_TYPE}-alpha.pnm"
[ ! -f "${DOC_TAG}" ] && pngtopnm "${PATH_SYSTEM}/lo-${DOC_TYPE}.png" | pnmscalefixed -xysize ${SIZE} ${SIZE} - > "${DOC_TAG}"
[ ! -f "${DOC_ALPHA}" ] && pngtopnm -alpha "${PATH_SYSTEM}/lo-${DOC_TYPE}.png" | pnmscalefixed -xysize ${SIZE} ${SIZE} - > "${DOC_ALPHA}"

# generate thumbnail according to document type
unzip -p "${FILE_LOCAL}" "Thumbnails/thumbnail.png" | pngtopnm > "${TMP_PNM}"
pbmmake -white 208 256 | pnmcomp -align center -valign middle "${TMP_PNM}" - | pnmscalefixed -xysize ${SIZE} ${SIZE} - | pnmcomp -align center -valign middle -alpha "${DOC_ALPHA}" "${DOC_TAG}" - | pnmtopng -downscale -compression 0 - > "${FILE_THUMB}"

# remove temporary local file
rm -f "${TMP_LOCAL}" "${TMP_PNM}"
