#!/usr/bin/env bash
# ---------------------------------------------------------
# Imposition of a document to generate a PDF booklet
# target format is selectable (A5, A4, ...) and default format is A4
#
# Setup procedure : http://bernaerts.dyndns.org/linux/74-ubuntu/248-ubuntu-imposition-print-book
#
# Depends on packages : 
#   * poppler-utils
#   * texlive-extra-utils
#   * unoconv
#
# Parameter :
#   $1 - full path of original document
#
# Version history :
#   26/09/2012, V1.0 - Creation by N. Bernaerts
#   05/05/2014, V2.0 - Add target format selection (thanks to Robin idea)
#   16/12/2014, V2.1 - Add file selection dialog
#   10/05/2015, V2.2 - Check tools availability
#   03/11/2015, V3.0 - Add support for LibreOffice & Ms-Office documents
#   18/10/2017, V3.1 - Correct critical bug (thanks to Igor Kushnir)
#   01/05/2020, V3.2 - Switch to pdfbook2
# ---------------------------------------------------------

# check mimetype, pdfinfo, pdfbook and unoconv
command -v mimetype >/dev/null 2>&1 || { zenity --error --text="Please install mimetype"; exit 1; }
command -v pdfinfo >/dev/null 2>&1 || { zenity --error --text="Please install pdfinfo [poppler-utils package]"; exit 1; }
command -v pdfbook2 >/dev/null 2>&1 || { zenity --error --text="Please install pdfbook2 [texlive-extra-utils package]"; exit 1; }
command -v unoconv >/dev/null 2>&1 || { zenity --error --text="Please install unoconv"; exit 1; }

# check if parameter is given, otherwise open dialog box selection
[ "$1" != "" ] && FILE_ORIGINAL="$1" || FILE_ORIGINAL=$(zenity --file-selection --title="Select document to convert to booklet")

# if no document selected, exit
[ ! -f "${FILE_ORIGINAL}" ] && exit 1

# ---------------------
#  Check document type
# ---------------------

# get the file mime type (application/msword, ...)
TYPE=""
MIMETYPE=$(mimetype -b "${FILE_ORIGINAL}")

# check if file is a libreoffice file (.odt, .ods, ...)
CHECK=$(echo "${MIMETYPE}" | grep ".opendocument.")
[ "${CHECK}" != "" ] && TYPE="libreoffice"

# check if file is a microsoft file 2007+ file (.docx, .xlsx, .pptx, ...)
CHECK=$(echo "${MIMETYPE}" | grep "vnd.openxmlformats-officedocument.")
[ "${CHECK}" != "" ] && TYPE="ms-office"

# if type is not found, check specific document types
if [ "${TYPE}" = "" ]
then
	case "${MIMETYPE}" in 
	# ms-office document (.doc, .xls, .ppt, ...)
	"application/msword" | "application/vnd.ms-word" | "application/vnd.ms-powerpoint" )
		TYPE="ms-office"
		;;

	# PDF document (.pdf)
	"application/pdf" | "application/x-pdf" | "application/x-bzpdf" | "application/x-gzpdf" )
		TYPE="pdf"
		;;

	# plain text file (.txt)
	"text/plain" | "application/x-shellscript" )
		TYPE="text"
		;;

	# other mimetype
	* )
		;;
	esac
fi

# if document type is not a candidate one, exit
[ "${TYPE}" = "" ] && { zenity --error --text="Document format is not compatible (pdf, libreoffice or ms-office)"; exit 1; }

# ----------------------
#  Select target format
# ----------------------

# select target format
ARR_FORMAT=('false' 'A2' 'false' 'A3' 'true' 'A4' 'false' 'A5' 'false' 'Letter' 'false' 'Executive' 'false' 'Legal')
TITLE=$(basename "${FILE_ORIGINAL}")
TEXT="Booklet will be generated from this document.\nPlease select target format.\n"
FORMAT=$(zenity --list --radiolist --width 350 --height 380 --title "${TITLE}" --text "${TEXT}" --column="Choice" --column="Format" ${ARR_FORMAT[@]})

# exit if no format selected
[ "${FORMAT}" = "" ] && exit

# --------------------
#  booklet conversion 
# --------------------

# generate filenames
ORIGINAL_FILE=$(basename "${FILE_ORIGINAL}")
ORIGINAL_DIR=$(dirname "${FILE_ORIGINAL}")
ORIGINAL_NAME="${ORIGINAL_FILE%.*}"
ORIGINAL_EXT="${ORIGINAL_FILE##*.}"

# generate temporary directory
TMP_DIR=$(mktemp -t -d "pdf-booklet-XXXXXXXX")
TMP_ORIGINAL="${TMP_DIR}/${ORIGINAL_FILE}"
pushd "${TMP_DIR}"

(
# if file is not PDF, convert file to pdf, else use original
echo "# Copy or convert original document to PDF format"
[ "${TYPE}" != "pdf" ] && unoconv -f pdf -o "${TMP_ORIGINAL}" "${FILE_ORIGINAL}" || cp "${FILE_ORIGINAL}" "${TMP_ORIGINAL}"

# calculate number of pages of original PDF 
# and determine if blank pages to be added at the end to get multiple of 4
echo "# Calculate number of booklet pages"
NUMPAGES=$(pdfinfo "${TMP_ORIGINAL}" | grep "Pages" | sed 's/^Pages:[ ]*\([0-9]*\).*$/\1/g')
DIVPAGES=$(expr ${NUMPAGES} % 4)
[ ${DIVPAGES} -gt 0 ] && NUMPAGES=$(expr ${NUMPAGES} + 4 - ${DIVPAGES})

# generate document with proper page number (multiple of 4)
echo "# Generation of PDF booklet"
TARGET=$(echo "${FORMAT}" | tr '[:upper:]' '[:lower:]')
pdfbook2 --short-edge --signature ${NUMPAGES} "--paper=${TARGET}paper" "${TMP_ORIGINAL}"

# copy booklet to original directory
rm "${TMP_ORIGINAL}"
cp ${TMP_DIR}/*.pdf "${ORIGINAL_DIR}"

) | zenity --width=500 --height=25 --progress --pulsate --auto-close --title "Booklet generation (${FORMAT})" --window-icon="/usr/share/icons/pdf-booklet.png"

# remove temporary directory
popd
rm -r "${TMP_DIR}"
