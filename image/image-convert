#!/usr/bin/env bash
# ----------------------------------------------------------------
#  Batch conversion of image files
#
#  Depends on :
#    * convert and identify [imagemagick]
#    * xdg-mime [xdg-utils]
#    * dcraw [dcraw]
#
#  Revision history :
#    12/08/2016, V1.0 - Creation by N. Bernaerts
#    13/08/2016, V1.1 - Add RAW image handling, performance tweaks
#    03/05/2020, V2.0 - Rewrite for Nautilus Python wrapper 
#                       Adaptation for Ubuntu 20.04 LTS 
# ----------------------------------------------------------------

echo "$$ $@" >> /tmp/test.log

# ------------------
#   Initialisation
# ------------------

# variables
ERROR=""
RATIO=""
FORMAT=""
ARR_FILE=( )

# if no argument, display help
if [ $# -eq 0 ] 
then
  echo "Tool to convert pictures from Nautilus."
  echo "Parameters are :"
  echo "  --format <format>     Target file format (png, jpg, tiff, gif)"
  echo "  --width <widht>       Target width"
  echo "  --height <height>     Target height"
  echo "  --keep-ratio          Keep original ratio"
  echo "  --quality <quality>   Target quality"
  echo "  <file1> <file2> ...   List of files"
  exit
fi

# loop to retrieve arguments
while test $# -gt 0
do
  case "$1" in
    "--format") shift; FORMAT="$1"; shift; ;;
    "--width") shift; WIDTH="$1"; shift; ;;
    "--height") shift; HEIGHT="$1"; shift; ;;
    "--quality") shift; QUALITY="$1"; shift; ;;
    "--keep-ratio") RATIO="keep"; shift; ;;
    *) ARR_FILE=("${ARR_FILE[@]}" "$1"); shift; ;;
   esac
done

# --------------------------
# check tools availability
# --------------------------

command -v xdg-mime >/dev/null 2>&1 || ERROR="Please install xdg-mime [xdg-utils]"
command -v dcraw >/dev/null 2>&1 || ERROR="Please install dcraw"
command -v convert >/dev/null 2>&1 || ERROR="Please install convert [imagemagick]"
command -v identify >/dev/null 2>&1 || ERROR="Please install identify [imagemagick]"

# generate temporary directory
TMP_DIR=$(mktemp -t -d "image-convert-XXXXXXXX")
pushd "${TMP_DIR}"

# check if file is provided
NBR_FILE=${#ARR_FILE[@]}
[ "${ERROR}" = "" -a ${NBR_FILE} -eq 0 ] && ERROR="No file selected"

# --------------------
#   Files conversion
# --------------------

# loop thru image files
if [ "${ERROR}" = "" ] 
then
	(
	INDEX=0
	for IMAGE_URI in "${ARR_FILE[@]}"
	do
		# increment file index
		INDEX=$((INDEX+1))

		# generate file data
		IMAGE_DIR=$(dirname "${IMAGE_URI}")
		IMAGE_FILE=$(basename "${IMAGE_URI}")
		IMAGE_NAME="${IMAGE_FILE%.*}"
		IMAGE_EXT="${IMAGE_FILE##*.}"

		# set target extension
		[ "${FORMAT}" != "" ] && TARGET_EXT="${FORMAT}" || TARGET_EXT="${IMAGE_EXT}"

		# generate temporary files
		TMP_ORIGINAL="${TMP_DIR}/original.${IMAGE_EXT}"
		TMP_PPM="${TMP_DIR}/image.ppm"
		TMP_TARGET="${TMP_DIR}/target.${TARGET_EXT}"

		# copy input file to temporary folder
		echo "# ${INDEX} / ${NBR_FILE} - Copy of original image ..."
		gio copy "${IMAGE_URI}" "${TMP_ORIGINAL}"

		# check if we are dealing with RAW file
		echo "# ${INDEX} / ${NBR_FILE} - Check if raw image ..."
		IS_RAW=$(dcraw -i -v "${TMP_ORIGINAL}"  | grep raw | cut -d':' -f2 | xargs)
		if [ ${IS_RAW} -gt 0 ]
		then
			# convert RAW to PPM and set as original image
			echo "# ${INDEX} / ${NBR_FILE} - Convert raw to ppm ..."
			dcraw -w -c "${TMP_ORIGINAL}" > "${TMP_PPM}"
			TMP_ORIGINAL="${TMP_PPM}"
		fi 

		# if both width and height are provided and aspect ratio should be kept
		if [ "${RATIO}" = "keep" -a "${WIDTH}" != "" -a "${HEIGHT}" != "" ]
		then
			TARGET_SIZE="${WIDTH}x${HEIGHT}"

		# else if both width and height are provided, force new size
		elif [ "${WIDTH}" != "" -a "${HEIGHT}" != "" ]
		then
			TARGET_SIZE="${WIDTH}x${HEIGHT}!"

		# else if width only is provided
		elif [ "${WIDTH}" != "" ]
		then
			TARGET_SIZE="${WIDTH}"
			
		# else if height only is provided
		elif [ "${HEIGHT}" != "" ]
		then
			TARGET_SIZE="x${HEIGHT}"

		# else, no target size
		else
			TARGET_SIZE=""
		fi

		# set conversion parameters
		ARR_PARAM=( "-auto-orient" "${TMP_ORIGINAL}" )
		[ "${TARGET_SIZE}" != "" ] && ARR_PARAM=( "${ARR_PARAM[@]}" "-resize" "${TARGET_SIZE}" )
		[ "${QUALITY}" != "" ] && ARR_PARAM=( "${ARR_PARAM[@]}" "-quality" "${QUALITY}" )

  		# convert picture
		echo "# ${INDEX} / ${NBR_FILE} - Convert image ..."
  		convert "${ARR_PARAM[@]}" "${TMP_TARGET}"

		# get final image width and height
		TARGET_WIDTH=$(identify -format "%w" "${TMP_TARGET}")
		TARGET_HEIGHT=$(identify -format "%h" "${TMP_TARGET}")

		# generate size suffix according to context (forced size or same extension)
		SUFFIX_SIZE=""
		[ "${WIDTH}" != "" -o "${HEIGHT}" != "" ] && SUFFIX_SIZE=" (${TARGET_WIDTH}x${TARGET_HEIGHT})"
		[ "${TARGET_EXT}" = "${IMAGE_EXT}" ] && SUFFIX_SIZE=" (${TARGET_WIDTH}x${TARGET_HEIGHT})"
		
		# generate target name and copy file
		echo "# ${INDEX} / ${NBR_FILE} - Copy back to original folder ..."
		TARGET_URI="${IMAGE_DIR}/${IMAGE_NAME}${SUFFIX_SIZE}.${TARGET_EXT}"
		gio copy "${TMP_TARGET}" "${TARGET_URI}"
	done
	) | zenity --width=500 --height=25 --pulsate --progress --auto-close --title "Conversion of ${NBR_FILE} images"
fi

# -------------------
#   End of operation
# -------------------

# display error message
[ "${ERROR}" != "" ] && zenity --error --width=300 --text="${ERROR}"

# remove temporary directory
popd
rm -r "${TMP_DIR}"

